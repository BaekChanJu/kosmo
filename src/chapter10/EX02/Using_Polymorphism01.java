package chapter10.EX02;

//다형성 (Polymorphism) : 하나의 객체가 여러가지 타입을 가질 수 있다
	//메소드 오버라이딩을 사용해서 부모클래스의 메소드를 재정의해서 자식클래스에서 재사용된다

//상속을 사용한 다형적 표현
	//상속 관계에서 객체 생성시 부모 타입으로 선언 가능하다 ex)1 참고
	//부모 타입으로 선언하면 부모 클래스의 필드와 메소드만 사용이가능함!
	//자식객체를 생성하면서 부모 타입으로 지정하면 업캐스팅이 자동으로된다
	//다시 자식 클래스의 필드와 메소드를 사용 하려면 다운캐스팅을해야하고 다운캐스팅은 수동

class A{ //부모
	
}

class B extends A{} //자식  / 부모는  A다

class C extends B{} //자식이다 근데 부모는 B다
class D extends B{} //자식이다 근데 부모는 B다

//                [A]          최상위 부모
//                [B]             자식
//               [C][D]       위에서 아래로 상속관계   자식의자식

public class Using_Polymorphism01 {

	public static void main(String[] args) {
		//자식에서 객체 생성후 부모타입으로는 지정이 가능하지만 B는A다
		//부모객체 생성후 자식 타입으로는 지정이 불가하다  A는B다 x   
		
		
		
		//1. A타입의 다형적 표현
			//a1은 A타입만 가지고있다.
			//a2는 A와B를 가지고있다 근데 A로 선언해서 A만 사용이가능하다
			//a3는 A,B,C를 가지고있다 근데 A로 선언해서 A만 사용이가능하다
			//a4는 A,B,D를 가지고있다 근데 A로 선언해서 A만 사용이가능하다
				//이것들을 쓰게하려면 다운,업 캐스팅이 필요
			
		A a1 = new A(); // A클래스는 A타입이다 , A는A다
		A a2 = new B(); // B클래스는 A 타입이다 B는A다  뒤에서 앞으로 읽는꼴 (맨앞이타입)
		A a3 = new C(); // C클래스는 A타입이다
		A a4 = new D(); // D클래스는 A타입이다
		
		
		//2.B타입으로 다형적 표현
//		B b1= new A(); // A는 B이다인데 이건 오류 /  A가 부모클래스다
		//하위에서 부모타입으로는 가르키는 것이된다 예를들어
		//C는 B다 가능 B 는 A다 가능인데  반대로 B 가 C다  A가 B다 이렇게 역으로는x
		B b2 = new B(); //B는B다 A와B내용을 다가짐
		B b3 = new C(); //C는 B다 가능 C가 자식이니까 A,B,C내용 다가짐
		B b4 = new D(); //D는 B다
		
		
		//3.C타입으로 다형적 표현
//		C c1 = new A(); 
//		C c2 = new B();
		C c3 = new C(); //여기만 가능
//		C c4 = new D();

	}

}
